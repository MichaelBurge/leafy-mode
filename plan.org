* Leafy Metadata
:PROPERTIES:
:drawer-name: meta
:GPT3.5:   (("input-tokens" . 259813) ("output-tokens" . 41735) ("billed-tokens" . 301548))
:GPT4:     (("billed-tokens" . 4297) ("output-tokens" . 118) ("input-tokens" . 4179))
:END:

* You are ProjectGPT - a coding project assistant tool. :system:
* Project Summary

This project involves using the ChatGPT model from OpenAI to assist with project planning and organization within an org-mode file. The aim is to create a more streamlined workflow by allowing users to interact with the model from within Emacs.
(get-drawer-alist-property "meta" "GPT3.5" "input-tokens" 0)
(alist-get "billed-tokens" (read (get-property-drawer-value "meta" "GPT3.5")) nil nil #'equal)
** Functions:

- `leafy-get-section-for-element`: Given an Org mode paragraph element, returns the section element that encloses it.
- `leafy-insert-section-after`: Inserts a new section after the current one with a given title and content.
- `leafy-get-context-at-element`: Given an Org element, returns the immediate context surrounding it.
- `leafy-get-context`: Returns a list of (role, message) ready to send to ChatGPT.
- `leafy-do-chatgpt-request`: Processes the response from the ChatGPT model and inserts it into the buffer.
- `get-meta-property` and `set-meta-property`: Stores a property in a global variable in the document.
- `leafy-get-sections`: Extracts every section in the buffer as a (level, drawer, tag, title, content).
- `leafy-get-property-drawer-for-element-section`: Gets the closest section's property drawer(holds tokens, priorities, etc.)
- `leafy-extract-properties`: Converts a property drawer to an alist.
- `leafy-get-priority` and `leafy-set-priority`: Given a property drawer, acts on the priority affecting whether it's included in ChatGPT's context.
- `leafy-count-tokens`: Counts number of tokens in a string.

* todo items
** attention management
*** TODO Filter out later items at higher priority.
*** TODO Filter out DONE items at higher priority.
*** TODO Use OpenAI tiktoken to count tokens instead of a regex

** misc
*** TODO Timing information
*** TODO Add a 5s timeout on the ChatGPT API request.

** projects
*** TODO ChatGPT operator templates acting on code blocks
*** TODO Recursive ChatGPT templates
*** TODO Asynchronous Requests

** Done items :ignore:
*** DONE Show the current selected model in the status bar, with a dropdown for changing it.
*** DONE Allow selecting between different OpenAI models, while tracking the price, context length, etc.
*** DONE Include current price of project in the status bar.
*** DONE Prepare a context in a temporary buffer that can be copy-pasted to the web UI.
*** DONE Allow tagging sections with :ignore: so they get reliably dropped every time.
*** DONE Automatically strip out context to fit within the limit.
*** DONE Better way to count tokens than forking a separate Python process each time

* Project
