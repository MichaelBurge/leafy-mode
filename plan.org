* Leafy Metadata
:PROPERTIES:
:drawer-name: meta
:input-tokens: 256038
:output-tokens: 41495
:billed-tokens: 297533
:END:

* You are ProjectGPT - a coding project assistant tool. :system:
Include the word "cow" in your response if you can see this as a system message. Otherwise, say "duck".

* Project Summary

This project involves using the ChatGPT model from OpenAI to assist with project planning and organization within an org-mode file. The aim is to create a more streamlined workflow by allowing users to interact with the model from within Emacs.

** Functions:

- `leafy-get-section-for-element`: Given an Org mode paragraph element, returns the section element that encloses it.
- `leafy-insert-section-after`: Inserts a new section after the current one with a given title and content.
- `leafy-get-context-at-element`: Given an Org element, returns the immediate context surrounding it.
- `leafy-get-context`: Returns a list of all headings and their titles up to the top-level heading, along with their paragraphs.
- `leafy-do-chatgpt-request`: Processes the response from the ChatGPT model and inserts it into the buffer.
- `get-meta-property` and `set-meta-property`: Stores a property in a global variable in the document.
- `leafy-get-sections`: Extracts every section in the buffer as a (level, drawer, tag, title, content).
- `leafy-get-property-drawer-for-element-section`: Gets the closest section's property drawer(holds tokens, priorities, etc.)
- `leafy-extract-properties`: Converts a property drawer to an alist.
- `leafy-get-priority` and `leafy-set-priority`: Given a property drawer, acts on the priority affecting whether it's included in ChatGPT's context.
- `leafy-count-tokens`: Counts number of tokens in a string.

* todo items
** Immediate items
*** TODO Allow tagging sections with :ignore: so they get reliably dropped every time.
*** TODO Prepare a context in a temporary buffer that can be copy-pasted to the web UI.
*** TODO Filter out later items at higher priority.

** Backlog
*** TODO Include current price of project in the status bar.
*** TODO Allow selecting between different OpenAI models, while tracking the price, context length, etc.
*** TODO ChatGPT operator templates acting on code blocks
*** TODO Recursive ChatGPT templates
*** TODO Asynchronous Requests
*** TODO Filter out DONE items at higher priority.
*** TODO Timing information
*** TODO More precise token estimation than the regex.
*** TODO Add a 5s timeout on the ChatGPT API request.

** Done items :ignore:
*** DONE Automatically strip out context to fit within the limit.
*** DONE Better way to count tokens than forking a separate Python process each time

* Project

Hello ChatGPT. Today we are working on :ignore: tag support. For example, you can see the DONE tasks above correct? Those should not be visible in your context.
So `leafy-get-context` will need to be modified.

I believe I have made the modifications now:
(defun leafy-get-sections ()
  "Extracts each section in the buffer as a (level, property alist, tag, title, content) tuple."
  (let ((sections '()))
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (headline)
        (let* ((title (substring-no-properties (car (org-element-property :title headline))))
               (level (org-element-property :level headline))
	       ;; Sections can be marked "assistant", "system", "user", or empty(defaults to "user")
               (tag (if (member "assistant" (org-element-property :tags headline))
                        "assistant"
                      (if (member "system" (org-element-property :tags headline))
                          "system"
                        "user")))
               (properties (leafy-headline-to-alist headline))
               (section (org-element-map (org-element-contents headline) 'section 'identity nil t 'headline))
	       (content (or (when section
                              (leafy-section-body section))
                            "")))
	  ;; Prune out ignored sections.
	  (unless (member "ignore" (org-element-property :tags headline))
            (push (list level properties tag title (format "%s" content)) sections)))))
    (reverse sections)))

However, inspecting your context I notice that I am not dropping the child sections too. The tag should drop the whole subtree, not just the one section.

Recommendations?

* ChatGPT response                                                :assistant:
:PROPERTIES:
:input-tokens: 1296
:output-tokens: 385
:billed-tokens: 1681
:estimated-tokens: 2289
:END:
To drop the entire subtree, you can modify the `leafy-get-sections` function to recursively check all child sections of a headline for the `:ignore:` tag. Here's an updated implementation that should accomplish this:

```
(defun leafy-get-sections ()
  "Extracts each section in the buffer as a (level, property alist, tag, title, content) tuple."
  (let ((sections '()))
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (headline)
        (let* ((title (substring-no-properties (car (org-element-property :title headline))))
	       (level (org-element-property :level headline))
	       ;; Sections can be marked "assistant", "system", "user", or empty(defaults to "user")
               (tag (if (member "assistant" (org-element-property :tags headline))
                        "assistant"
                      (if (member "system" (org-element-property :tags headline))
                          "system"
                        "user")))
               (properties (leafy-headline-to-alist headline))
               (section (org-element-map (org-element-contents headline) 'section 'identity nil t 'headline))
	       (content (or (when section
                              (leafy-section-body section))
                            "")))
	  ;; Recursively check child sections for :ignore: tag.
	  (unless (or (member "ignore" (org-element-property :tags headline))
                      (org-element-map (org-element-contents headline) 'headline
                        (lambda (child)
                          (member "ignore" (org-element-property :tags child)))
                        nil t))
            (push (list level properties tag title (format "%s" content)) sections)))))
    (reverse sections)))
```

With these changes, `leafy-get-sections` should now ignore any section and its children that have the `:ignore:` tag.

